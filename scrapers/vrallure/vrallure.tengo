text := import("text")
fmt := import("fmt")
funk := import("funk")
times := import("times")
url := import("url")

// Regex for original resolution of both covers and gallery
reGetOriginal := `^(https?:\/\/k3y8c8f9\.ssl\.hwcdn\.net\/vra\/)(?:largethumbs|hugethumbs|rollover_large)(\/.+)-c\d{3,4}x\d{3,4}(\.\w{3,4})$`

// Parse the URL to pull the ID out
tmp := text.split(homepageURL, "/")
tmp2 := text.split(tmp[len(tmp)-1], "_")[0]
//siteID := text.Replace(tmp2, "vra", "", -1)

// Duration
// Note the element `div.scene-details p.duration` is inside an HTML comment block (could colly still get this?)
duration := 0

// Release date
if released {
	tmpReleased := times.parse("Jan 2, 2006", released)
	released := times.time_format(tmpReleased, "2006-01-02")
}

// Cover URL is small and we need to change part of it for a large version
//org: tmpParts := reGetOriginal.FindStringSubmatch(e.Request.AbsoluteURL(poster))
//org: sc.Covers = append(sc.Covers, tmpParts[1]+"largethumbs"+tmpParts[2]+tmpParts[3])
//TODO not working:
fmt.println("TEST cover:" + cover)
fmt.println("TEST reGetOriginal:" + reGetOriginal)
r := text.re_find(reGetOriginal, cover)
fmt.println("TEST regex:" + r)
coverURL := r[1].text + "largethumbs" + r[2][3].text


// Gallery URL is small and we need to change part of it for a large version
//org: tmpParts := reGetOriginal.FindStringSubmatch(e.Request.AbsoluteURL(e.Attr("src")))
//org: sc.Gallery = append(sc.Gallery, tmpParts[1]+"rollover_large"+tmpParts[2]+tmpParts[3])
//TODO not working:
/*
g := []
for i in galleryURLS {
	r := text.re_findStringSubmatch(reGetOriginal, i)
	g = append(r[1].text + "rollover_large" + r[2][3].text)
}
galleryURLS = g
*/

// Cast
//org: sc.Cast = append(sc.Cast, strings.TrimSpace(strings.Replace(e.Text, ",", "", -1)))
//TODO not working:
/*
cast := []
for i in castNames {
    cast = append( text.trim_space( text.replace(i, ",", "", -1)  ) )
}
*/

// Tags - TODO
// Skipping some very generic and useless tags
/*
//org:
		skiptags := map[string]bool{
			"HD Virtual Reality Porn": true,
			"Virtual Reality Porn":    true,
			"VR Porn":                 true,
		}

		if tag != "" && !skiptags[tag] {
			sc.Tags = append(sc.Tags, tag)
		}
*/

// Filenames TODO
//org: (not sure what this does in go exatly and no idea how to do this in tengo)
/*
origURL, _ := url.Parse(e.Attr("value"))
   sc.Filenames = append(sc.Filenames, origURL.Query().Get("name"))
*/
// Some VR headsets use the same files so keep only the unique filenames.
//filenames := funk.uniq_string(f)
